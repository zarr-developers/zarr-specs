{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://zarr-specs.readthedocs.io/v3/json-schema/array.json",
    "title": "Zarr v3 Array Metadata Schema",
    "description": "JSON Schema for Zarr v3 Array metadata documents.",
    "type": "object",
    "required": [
        "shape",
        "data_type",
        "chunk_grid",
        "chunk_key_encoding",
        "fill_value",
        "codecs",
        "zarr_format",
        "node_type"
    ],
    "properties": {
        "zarr_format": {
            "type": "integer",
            "const": 3,
            "description": "Version of the Zarr storage specification"
        },
        "node_type": {
            "type": "string",
            "const": "array",
            "description": "Type of hierarchy node element, which must be 'array'."
        },
        "shape": {
            "type": "array",
            "items": {
                "type": "integer",
                "minimum": 0
            },
            "description": "Array of integers providing the length of each dimension"
        },
        "data_type": {
            "$ref": "#/$defs/data_type",
            "description": "Data type of the Zarr array"
        },
        "chunk_grid": {
            "$ref": "#/$defs/chunk_grid",
            "description": "Chunk grid configuration"
        },
        "chunk_key_encoding": {
            "$ref": "#/$defs/chunk_key_encoding",
            "description": "Mapping from chunk grid coordinates to storage keys"
        },
        "fill_value": {
            "description": "Fill value for uninitialized portions of the array"
        },
        "codecs": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#/$defs/codec"
            },
            "description": "List of codecs for encoding and decoding chunks"
        },
        "attributes": {
            "$ref": "#/$defs/attributes",
            "description": "User-defined metadata"
        },
        "storage_transformers": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/storage_transformer"
            },
            "description": "List of storage transformers"
        },
        "dimension_names": {
            "type": "array",
            "items": {
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "null"
                    }
                ]
            },
            "description": "Names for each dimension"
        }
    },
    "additionalProperties": {
        "$ref": "#/$defs/extension_property"
    },
    "$defs": {
        "data_type": {
            "oneOf": [
                {
                    "type": "string",
                    "enum": [
                        "bool",
                        "int8",
                        "int16",
                        "int32",
                        "int64",
                        "uint8",
                        "uint16",
                        "uint32",
                        "uint64",
                        "float16",
                        "float32",
                        "float64",
                        "complex64",
                        "complex128"
                    ],
                    "description": "Core data type identifier"
                },
                {
                    "type": "string",
                    "pattern": "^r[0-9]+$",
                    "description": "Raw data type (r followed by bit count, multiple of 8; note that the divisibility by 8 is not enforced by the schema)."
                },
                {
                    "$ref": "#/$defs/extension_data_type",
                    "description": "Extension data type"
                }
            ]
        },
        "chunk_grid": {
            "oneOf": [
                {
                    "$ref": "#/$defs/regular_chunk_grid"
                },
                {
                    "$ref": "#/$defs/extension_chunk_grid"
                }
            ]
        },
        "regular_chunk_grid": {
            "type": "object",
            "required": [
                "name",
                "configuration"
            ],
            "properties": {
                "name": {
                    "const": "regular"
                },
                "configuration": {
                    "type": "object",
                    "required": [
                        "chunk_shape"
                    ],
                    "properties": {
                        "chunk_shape": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "description": "Shape of each chunk"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "chunk_key_encoding": {
            "oneOf": [
                {
                    "$ref": "#/$defs/default_chunk_key_encoding"
                },
                {
                    "$ref": "#/$defs/v2_chunk_key_encoding"
                },
                {
                    "$ref": "#/$defs/extension_chunk_key_encoding"
                }
            ]
        },
        "default_chunk_key_encoding": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "const": "default"
                },
                "configuration": {
                    "type": "object",
                    "properties": {
                        "separator": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "v2_chunk_key_encoding": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "const": "v2"
                },
                "configuration": {
                    "type": "object",
                    "properties": {
                        "separator": {
                            "type": "string",
                            "enum": [
                                "/",
                                "."
                            ],
                            "default": "."
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "codec": {
            "oneOf": [
                {
                    "$ref": "#/$defs/blosc_codec"
                },
                {
                    "$ref": "#/$defs/bytes_codec"
                },
                {
                    "$ref": "#/$defs/crc32c_codec"
                },
                {
                    "$ref": "#/$defs/gzip_codec"
                },
                {
                    "$ref": "#/$defs/sharding_codec"
                },
                {
                    "$ref": "#/$defs/zstd_codec"
                },
                {
                    "$ref": "#/$defs/transpose_codec"
                },
                {
                    "$ref": "#/$defs/extension_codec"
                }
            ]
        },
        "bytes_codec": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "const": "bytes"
                },
                "configuration": {
                    "type": "object",
                    "properties": {
                        "endian": {
                            "type": "string",
                            "enum": [
                                "big",
                                "little"
                            ],
                            "description": "Byte order for multi-byte data types"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "transpose_codec": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "const": "transpose"
                },
                "configuration": {
                    "type": "object",
                    "required": [
                        "order"
                    ],
                    "properties": {
                        "order": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "enum": [
                                        "C",
                                        "F"
                                    ],
                                    "deprecated": true,
                                    "description": "Deprecated in favor of the array of dimension indices."
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                }
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "blosc_codec": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "const": "blosc"
                },
                "configuration": {
                    "type": "object",
                    "required": [
                        "cname",
                        "clevel",
                        "shuffle"
                    ],
                    "properties": {
                        "cname": {
                            "type": "string",
                            "enum": [
                                "blosclz",
                                "lz4",
                                "lz4hc",
                                "zlib",
                                "zstd"
                            ],
                            "description": "Compression algorithm"
                        },
                        "clevel": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 9,
                            "description": "Compression level"
                        },
                        "shuffle": {
                            "type": "string",
                            "enum": [
                                "noshuffle",
                                "shuffle",
                                "bitshuffle"
                            ],
                            "description": "Shuffle algorithm"
                        },
                        "typesize": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "Size in bytes of the data type"
                        },
                        "blocksize": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Block size for compression (0 for automatic)"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "gzip_codec": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "const": "gzip"
                },
                "configuration": {
                    "type": "object",
                    "properties": {
                        "level": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 9,
                            "description": "Compression level"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "sharding_codec": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "const": "sharding"
                },
                "configuration": {
                    "type": "object",
                    "properties": {
                        "chunk_shape": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "description": "Shape of the inner chunks in a shard along each dimension of the outer array."
                        },
                        "codecs": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/codec"
                            },
                            "description": "Codecs to use for encoding and decoding inner chunks."
                        },
                        "index_codecs": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/codec"
                            },
                            "description": "Codecs to use for encoding and decoding index chunks."
                        },
                        "index_location": {
                            "type": "string",
                            "enum": [
                                "end",
                                "start"
                            ],
                            "description": "Location of the index chunks in the shard."
                        }
                    }
                }
            }
        },
        "zstd_codec": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "const": "zstd"
                },
                "configuration": {
                    "type": "object",
                    "properties": {
                        "level": {
                            "type": "integer",
                            "description": "Compression level"
                        },
                        "checksum": {
                            "type": "boolean",
                            "description": "Whether to include checksum"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "crc32c_codec": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "const": "crc32c"
                }
            },
            "additionalProperties": false
        },
        "storage_transformer": {
            "$ref": "#/$defs/extension_object",
            "description": "Storage transformer configuration"
        },
        "extension_object": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "pattern": "^[a-z][a-z0-9-_.]+$|^[a-zA-Z][a-zA-Z0-9+.-]*:",
                    "description": "Extension name (registered name or URI)"
                },
                "configuration": {
                    "type": "object",
                    "description": "Optional configuration object for the extension"
                },
                "must_understand": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether implementations must understand this extension"
                }
            },
            "additionalProperties": false
        },
        "extension_data_type": {
            "allOf": [
                {
                    "$ref": "#/$defs/extension_object"
                },
                {
                    "properties": {
                        "name": {
                            "type": "string",
                            "not": {
                                "anyOf": [
                                    {
                                        "enum": [
                                            "bool",
                                            "int8",
                                            "int16",
                                            "int32",
                                            "int64",
                                            "uint8",
                                            "uint16",
                                            "uint32",
                                            "uint64",
                                            "float16",
                                            "float32",
                                            "float64",
                                            "complex64",
                                            "complex128"
                                        ]
                                    },
                                    {
                                        "pattern": "^r[0-9]+$"
                                    }
                                ]
                            }
                        }
                    }
                }
            ],
            "description": "Extension data type that must not clash with core data types"
        },
        "extension_chunk_key_encoding": {
            "allOf": [
                {
                    "$ref": "#/$defs/extension_object"
                },
                {
                    "properties": {
                        "name": {
                            "type": "string",
                            "not": {
                                "enum": [
                                    "default",
                                    "v2"
                                ]
                            }
                        }
                    }
                }
            ],
            "description": "Extension chunk key encoding that must not clash with core chunk key encodings"
        },
        "extension_codec": {
            "allOf": [
                {
                    "$ref": "#/$defs/extension_object"
                },
                {
                    "properties": {
                        "name": {
                            "type": "string",
                            "not": {
                                "enum": [
                                    "bytes",
                                    "transpose",
                                    "blosc",
                                    "gzip",
                                    "zstd",
                                    "crc32c"
                                ]
                            }
                        }
                    }
                }
            ],
            "description": "Extension codec that must not clash with core codecs"
        },
        "extension_chunk_grid": {
            "allOf": [
                {
                    "$ref": "#/$defs/extension_object"
                },
                {
                    "properties": {
                        "name": {
                            "type": "string",
                            "not": {
                                "enum": [
                                    "regular"
                                ]
                            }
                        }
                    }
                }
            ],
            "description": "Extension chunk grid that must not clash with core chunk grids"
        },
        "extension_property": {
            "description": "Extension properties that implementations may not understand",
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "must_understand": {
                            "const": false
                        }
                    },
                    "required": [
                        "must_understand"
                    ]
                },
                true
            ]
        },
        "attributes": {
            "type": "object",
            "description": "User-defined metadata as key-value pairs."
        }
    }
}